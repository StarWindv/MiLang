fx get_greeting():
    return "Welcome to MiLang"

fx square(x):
    return x * x

fx multiply(a, b):
    return a * b

fx calculate(x, y=10):
    return x + y

fx is_even(n):
    half = n / 2
    if half == float(int(half)):
        return true
    else:
        return false

fx to_boolean(value):
    t = type(value)
    if t == "int":
        return value != 0
    elif t == "float":
        return value != 0.0
    else:
        return true

fx apply_func(val, func):
    return func(val)

fx power_recursive(base, exp):
    if exp == 0:
        return 1
    else:
        return base * power_recursive(base, exp - 1)

fx get_null():
    return Null

writeln(">>> TEST BASIC FUNCTIONS")
writeln("get_greeting(): ", get_greeting())
writeln("square(7): ", square(7))
writeln("multiply(4, 5.5): ", multiply(4, 5.5))
writeln("<<< END BASIC FUNCTIONS")
writeln()

writeln(">>> TEST DEFAULT PARAMETERS")
writeln("calculate(5): ", calculate(5))
writeln("calculate(5, 3): ", calculate(5, 3))
writeln("<<< END DEFAULT PARAMETERS")
writeln()

writeln(">>> TEST CONDITIONAL FUNCTIONS")
writeln("is_even(8): ", is_even(8))
writeln("is_even(7): ", is_even(7))
writeln("!is_even(7): ", !is_even(7))
writeln("<<< END CONDITIONAL FUNCTIONS")
writeln()

writeln(">>> TEST TYPE CONVERSION")
writeln("to_boolean(0): ", to_boolean(0))
writeln("to_boolean(5): ", to_boolean(5))
writeln("to_boolean(3.14): ", to_boolean(3.14))
writeln("to_boolean(0.0): ", to_boolean(0.0))
println("to_boolean('false'): ", to_boolean("false"))
writeln("to_boolean('true'): ", to_boolean("true"))
writeln("<<< END TYPE CONVERSION")
writeln()

writeln(">>> TEST FUNCTION AS ARGUMENT")
func_var = square
writeln("func_var(6): ", func_var(6))
writeln("apply_func(9, square): ", apply_func(9, square))
writeln("<<< END FUNCTION AS ARGUMENT")
writeln()

writeln(">>> TEST RECURSIVE FUNCTION")
writeln("power_recursive(2, 3): ", power_recursive(2, 3))
writeln("power_recursive(5, 0): ", power_recursive(5, 0))
writeln("<<< END RECURSIVE FUNCTION")
writeln()

writeln(">>> TEST NULL TYPE")
writeln("get_null(): ", get_null())
writeln("type(get_null()): ", type(get_null()))
writeln("<<< END NULL TYPE")
writeln()

writeln(">>> TEST FUNCTION TYPES")
writeln("type(get_greeting): ", type(get_greeting))
writeln("type(square): ", type(square))
writeln("<<< END FUNCTION TYPES")
